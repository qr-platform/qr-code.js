export default TinyColor;
declare class TinyColor {
    static fromRatio(color: any, opts: any): TinyColor;
    static equals(color1: any, color2: any): boolean;
    static random(): TinyColor;
    static mix(color1: any, color2: any, amount: any): TinyColor;
    static readability(color1: any, color2: any): number;
    static isReadable(color1: any, color2: any, wcag2: any): boolean;
    static mostReadable(baseColor: any, colorList: any, args?: {}): any;
    constructor(color?: string, opts?: {});
    _originalInput: string | undefined;
    _r: number | undefined;
    _g: number | undefined;
    _b: number | undefined;
    _a: number | undefined;
    _roundA: number | undefined;
    _format: any;
    _gradientType: any;
    _ok: boolean | undefined;
    isDark(): boolean;
    isLight(): boolean;
    isValid(): boolean | undefined;
    getOriginalInput(): string | undefined;
    getFormat(): any;
    getAlpha(): number | undefined;
    getBrightness(): number;
    getLuminance(): number;
    setAlpha(value: any): this;
    toHsv(): {
        h: number;
        s: number;
        v: number;
        a: number | undefined;
    };
    toHsvString(): string;
    toHsl(): {
        h: number;
        s: number;
        l: number;
        a: number | undefined;
    };
    toHslString(): string;
    toHex(allow3Char: any): string;
    toHexString(allow3Char: any): string;
    toHex8(allow4Char: any): string;
    toHex8String(allow4Char: any): string;
    toRgb(): {
        r: number;
        g: number;
        b: number;
        a: number | undefined;
    };
    toRgbString(): string;
    toPercentageRgb(): {
        r: string;
        g: string;
        b: string;
        a: number | undefined;
    };
    toPercentageRgbString(): string;
    toName(): any;
    toFilter(secondColor: any): string;
    toString(format: any): any;
    clone(): TinyColor;
    _applyModification(fn: any, ...args: any[]): this;
    lighten(...args: any[]): this;
    brighten(...args: any[]): this;
    darken(...args: any[]): this;
    desaturate(...args: any[]): this;
    saturate(...args: any[]): this;
    greyscale(...args: any[]): this;
    spin(...args: any[]): this;
    _applyCombination(fn: any, ...args: any[]): any;
    analogous(...args: any[]): any;
    complement(...args: any[]): any;
    monochromatic(...args: any[]): any;
    splitcomplement(...args: any[]): any;
    triad(): any;
    tetrad(): any;
}
declare namespace TinyColor {
    namespace names {
        let aliceblue: string;
        let antiquewhite: string;
        let aqua: string;
        let aquamarine: string;
        let azure: string;
        let beige: string;
        let bisque: string;
        let black: string;
        let blanchedalmond: string;
        let blue: string;
        let blueviolet: string;
        let brown: string;
        let burlywood: string;
        let burntsienna: string;
        let cadetblue: string;
        let chartreuse: string;
        let chocolate: string;
        let coral: string;
        let cornflowerblue: string;
        let cornsilk: string;
        let crimson: string;
        let cyan: string;
        let darkblue: string;
        let darkcyan: string;
        let darkgoldenrod: string;
        let darkgray: string;
        let darkgreen: string;
        let darkgrey: string;
        let darkkhaki: string;
        let darkmagenta: string;
        let darkolivegreen: string;
        let darkorange: string;
        let darkorchid: string;
        let darkred: string;
        let darksalmon: string;
        let darkseagreen: string;
        let darkslateblue: string;
        let darkslategray: string;
        let darkslategrey: string;
        let darkturquoise: string;
        let darkviolet: string;
        let deeppink: string;
        let deepskyblue: string;
        let dimgray: string;
        let dimgrey: string;
        let dodgerblue: string;
        let firebrick: string;
        let floralwhite: string;
        let forestgreen: string;
        let fuchsia: string;
        let gainsboro: string;
        let ghostwhite: string;
        let gold: string;
        let goldenrod: string;
        let gray: string;
        let green: string;
        let greenyellow: string;
        let grey: string;
        let honeydew: string;
        let hotpink: string;
        let indianred: string;
        let indigo: string;
        let ivory: string;
        let khaki: string;
        let lavender: string;
        let lavenderblush: string;
        let lawngreen: string;
        let lemonchiffon: string;
        let lightblue: string;
        let lightcoral: string;
        let lightcyan: string;
        let lightgoldenrodyellow: string;
        let lightgray: string;
        let lightgreen: string;
        let lightgrey: string;
        let lightpink: string;
        let lightsalmon: string;
        let lightseagreen: string;
        let lightskyblue: string;
        let lightslategray: string;
        let lightslategrey: string;
        let lightsteelblue: string;
        let lightyellow: string;
        let lime: string;
        let limegreen: string;
        let linen: string;
        let magenta: string;
        let maroon: string;
        let mediumaquamarine: string;
        let mediumblue: string;
        let mediumorchid: string;
        let mediumpurple: string;
        let mediumseagreen: string;
        let mediumslateblue: string;
        let mediumspringgreen: string;
        let mediumturquoise: string;
        let mediumvioletred: string;
        let midnightblue: string;
        let mintcream: string;
        let mistyrose: string;
        let moccasin: string;
        let navajowhite: string;
        let navy: string;
        let oldlace: string;
        let olive: string;
        let olivedrab: string;
        let orange: string;
        let orangered: string;
        let orchid: string;
        let palegoldenrod: string;
        let palegreen: string;
        let paleturquoise: string;
        let palevioletred: string;
        let papayawhip: string;
        let peachpuff: string;
        let peru: string;
        let pink: string;
        let plum: string;
        let powderblue: string;
        let purple: string;
        let rebeccapurple: string;
        let red: string;
        let rosybrown: string;
        let royalblue: string;
        let saddlebrown: string;
        let salmon: string;
        let sandybrown: string;
        let seagreen: string;
        let seashell: string;
        let sienna: string;
        let silver: string;
        let skyblue: string;
        let slateblue: string;
        let slategray: string;
        let slategrey: string;
        let snow: string;
        let springgreen: string;
        let steelblue: string;
        let tan: string;
        let teal: string;
        let thistle: string;
        let tomato: string;
        let turquoise: string;
        let violet: string;
        let wheat: string;
        let white: string;
        let whitesmoke: string;
        let yellow: string;
        let yellowgreen: string;
    }
    let hexNames: {};
}
