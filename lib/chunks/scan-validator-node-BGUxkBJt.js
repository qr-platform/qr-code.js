import{Resvg as e}from"@resvg/resvg-js";import{scanImageData as t}from"@undecaf/zbar-wasm";import{Jimp as r}from"jimp";let a=!1;const s=e=>{a&&console.debug("[QR Validator]",e)},o=new class{constructor(e={}){this.maxRetries=e.maxRetries??5,this.retryInterval=e.retryInterval??100,this.debug=e.debug??!1}log(e){this.debug&&console.log(`[QRValidatorZbarNode] ${e}`)}async validate(e,r=!1){try{if(!t)throw new Error("zbar-wasm library not found. Please ensure @undecaf/zbar-wasm is installed and loaded correctly.");return this.validateWithRetry(e,r)}catch(e){return this.log(`Validation error: ${e instanceof Error?e.message:String(e)}`),{isValid:!1,error:e instanceof Error?e.message:String(e),errorCode:"VALIDATION_ERROR"}}}sleep(e){return new Promise((t=>setTimeout(t,e)))}async processImageResvg(t,r){try{const a=new e(t,{fitTo:{mode:"zoom",value:2}}).render(),s=a.width,o=a.height,i=a.pixels,n=Buffer.from(i);if(r)for(let e=0;e<n.length;e+=4)n[e]=255-n[e],n[e+1]=255-n[e+1],n[e+2]=255-n[e+2];return{imageData:{data:new Uint8ClampedArray(n),width:s,height:o},metadata:{width:s,height:o}}}catch(e){throw this.log(`Image processing error: ${e instanceof Error?e.message:String(e)}`),e}}async validateWithRetry(e,t){let r=0,a=null;const s=e;let o=!1;do{r++;try{const e=this.processImageResvg,{imageData:i}=await e(s,t);if(this.log(`Processed image ${i.width}x${i.height} pixels`),this.debug&&await this.saveDebugImage(i,`debug/qr-attempt-${r}-${o?"inverted":"normal"}`),a=await this.decodeQR(i),this.log(`Barcode scan attempt ${r}: ${a.success?"Success":"Failed"}`),a.success)return a.attempts=r,{isValid:!0,data:a.data,format:a.format,attempts:r,isInverted:t}}catch(e){this.log(`Attempt ${r} failed: ${e instanceof Error?e.message:String(e)}`),a={success:!1,error:e instanceof Error?e.message:String(e),errorCode:"PROCESSING_ERROR"}}!t||o?r<this.maxRetries&&await this.sleep(this.retryInterval):(o=!0,this.log("Switching to inverted image for next attempt"))}while(r<this.maxRetries);return{isValid:!1,attempts:r,error:`No barcode detected after ${r} attempts`,errorCode:"MAX_RETRIES_EXCEEDED"}}async saveDebugImage(e,t){try{const a=new r({data:Buffer.from(e.data),width:e.width,height:e.height}),s=`${t}-${Date.now()}`;await a.write(`${s}.png`),this.log(`Debug image saved to: ${s}`)}catch(e){this.log(`Failed to save debug image: ${e instanceof Error?e.message:String(e)}`)}}async decodeQR(e){try{let r;try{r=await t(e)}catch(e){this.log(`Error decoding QR code: ${e}`)}if(r&&r.length>0){const e=r[0],t=e.decode();return this.log(`Detected: ${e.typeName} - ${t}`),{success:!0,data:t,format:e.typeName||"UNKNOWN",confidence:.9,count:r.length,allSymbols:r.map((e=>({data:e.decode(),type:e.typeName,points:e.points})))}}return{success:!1,error:"No barcode detected",errorCode:"NO_BARCODE_DETECTED"}}catch(e){return this.log("Decoder error:"),console.error(e instanceof Error?e.message:String(e)),{success:!1,error:`Decoder error: ${e instanceof Error?e.message:String(e)}`,errorCode:"DECODER_ERROR"}}}}({maxRetries:1,debug:!1,retryInterval:200}),i={validateZbar:async(e,t=!1)=>{a=t||a,a&&console.time("scan-validator");const r=[{name:"Normal SVG",execute:async()=>{if(!e)throw new Error("No svg source");const t=await o.validate(e,!1);if(!t.isValid||!t.data)throw new Error("No text found in normal QR code");return{isValid:!0,isInverted:!1,decodedText:t.data,message:"Decoded successfully.",attempts:t.attempts}}},{name:"Inverted SVG",execute:async()=>{if(!e)throw new Error("No svg source for inverted attempt");const t=await o.validate(e,!0);if(!t.isValid||!t.data)throw new Error("No text found in inverted QR code");return{isValid:!0,isInverted:!0,decodedText:t.data,message:"Decoded successfully (inverted).",attempts:t.attempts}}}];for(const e of r)try{s(`Trying ${e.name} decode...`);const t=await e.execute();return a&&console.timeEnd("scan-validator"),t}catch(t){s(`${e.name} decode failed:`),s(t)}return a&&console.timeEnd("scan-validator"),{isValid:!1,message:"Failed to decode QR code after all attempts."}}};export{i as qrValidator};
